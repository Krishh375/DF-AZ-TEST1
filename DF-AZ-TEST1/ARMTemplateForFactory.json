{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DF-AZ-TEST1"
		},
		"AZDestinyGlobalDatabase_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AZDestinyGlobalDatabase'"
		},
		"AzureBlobPracdacdemo_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobPracdacdemo'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'AzureBlobStorage2'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"Db21_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Db21'"
		},
		"Oracle1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Oracle1'"
		},
		"Oracle2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle2'",
			"defaultValue": "host=@{linkedService().hostname};port=@{linkedService().portname};sid=@{linkedService().sid};user id=asdf;Password=@{linkedService().password}"
		},
		"RestService_clientSecret": {
			"type": "secureString",
			"metadata": "Secure string for 'clientSecret' of 'RestService'"
		},
		"ServiceNow_LS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ServiceNow_LS'"
		},
		"Sftp_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Sftp'"
		},
		"Snowflake_ls_privateKey": {
			"type": "secureString",
			"metadata": "Secure string for 'privateKey' of 'Snowflake_ls'"
		},
		"Snowflake_ls_privateKeyPassphrase": {
			"type": "secureString",
			"metadata": "Secure string for 'privateKeyPassphrase' of 'Snowflake_ls'"
		},
		"destinationimmuls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'destinationimmuls'"
		},
		"immutablecopyls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'immutablecopyls'"
		},
		"productbuilderCosmos_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'productbuilderCosmos'"
		},
		"AZDestinyGlobalDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "krishh123.database.windows.net"
		},
		"AZDestinyGlobalDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DestinyGlobal"
		},
		"AZDestinyGlobalDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "krishh"
		},
		"Azdemoappentra_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dempappentrakey.vault.azure.net/"
		},
		"AzureBlobStorage2_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://azdevsanewadls.blob.core.windows.net/"
		},
		"AzureBlobStorage2_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "16b3c013-d300-468d-ac64-7eda0820b6d3"
		},
		"AzureBlobStorage2_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "bb00111b-668b-4ba3-b619-21fa36679640"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azlearnsagen2.dfs.core.windows.net/"
		},
		"AzureDataLakeStorageLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsdemostorage21.dfs.core.windows.net/"
		},
		"AzureKeyVaultsqlserver_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://sqlserver-cred-onprem.vault.azure.net/"
		},
		"AzurePostgreSql_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "az-postgres-demo.postgres.database.azure.com"
		},
		"AzurePostgreSql_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "testdemodatabase"
		},
		"HttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://httpstat.us/200?sleep=60000000"
		},
		"Oracle1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().server}"
		},
		"Oracle1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "@{linkedService().username}"
		},
		"RestService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().Baseurlendpoint}"
		},
		"RestService_properties_typeProperties_clientId": {
			"type": "string",
			"defaultValue": "@{linkedService().clientid}"
		},
		"ServiceNow_LS_properties_typeProperties_endpoint": {
			"type": "string",
			"defaultValue": "https://dev318723.service-now.com/nav_to.do?uri=oauth_entity.do?sys_id=2f0b92ea93332210bd0eb4897bba102e%26sysparm_view=default"
		},
		"ServiceNow_LS_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "thatikondakrishna77@gmail.com"
		},
		"Sftp_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "az-postgres-demo.postgres.database.azure.com"
		},
		"Sftp_properties_typeProperties_hostKeyFingerprint": {
			"type": "string",
			"defaultValue": "flkfllessllfdfld"
		},
		"Sftp_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "pg"
		},
		"Snowflake_ls_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "MY_DATABASE"
		},
		"SqlServer_onprem_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().servername}"
		},
		"SqlServer_onprem_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().databasename}"
		},
		"SqlServer_onprem_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().username}"
		},
		"ls_kv_datafactory_bi_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-devqa-datafactory-bi.vault.azure.net/"
		},
		"triggereventstorage_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/98163876-b4d3-4128-ad45-c4c6a103c74c/resourceGroups/az-learn/providers/Microsoft.Storage/storageAccounts/adlsdemostorage21"
		},
		"AzureBlobStorageendpoint_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/98163876-b4d3-4128-ad45-c4c6a103c74c/resourceGroups/az-learn/providers/Microsoft.Storage/storageAccounts/pracdemostorage"
		},
		"AzureBlobStorageendpoint_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"AzureBlobStorageendpoint_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"pracdemostorage.blob.core.windows.net"
			]
		},
		"AzureDataLakeStorage299_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/98163876-b4d3-4128-ad45-c4c6a103c74c/resourceGroups/az-learn/providers/Microsoft.Storage/storageAccounts/pracdemostorage"
		},
		"AzureDataLakeStorage299_properties_groupId": {
			"type": "string",
			"defaultValue": "dfs"
		},
		"AzureDataLakeStorage299_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"pracdemostorage.dfs.core.windows.net"
			]
		},
		"AzureSqlDatabase194_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/98163876-b4d3-4128-ad45-c4c6a103c74c/resourceGroups/az-learn/providers/Microsoft.Sql/servers/azlearndb"
		},
		"AzureSqlDatabase194_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		},
		"AzureSqlDatabase194_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"azlearndb.database.windows.net"
			]
		},
		"AzureSqlDatabase310_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/98163876-b4d3-4128-ad45-c4c6a103c74c/resourceGroups/RG-TEST/providers/Microsoft.Sql/servers/krishh123"
		},
		"AzureSqlDatabase310_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		},
		"AzureSqlDatabase310_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"krishh123.database.windows.net"
			]
		},
		"CosmosDb_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/98163876-b4d3-4128-ad45-c4c6a103c74c/resourceGroups/RG-PROD/providers/Microsoft.DocumentDB/databaseAccounts/krishh-cosmos-db"
		},
		"CosmosDb_properties_groupId": {
			"type": "string",
			"defaultValue": "Sql"
		},
		"CosmosDb_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"krishh-cosmos-db.documents.azure.com"
			]
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/FOREACHpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.outputfolder",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 2,
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "csvdatasetsource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "sinkcsvdataset",
											"type": "DatasetReference",
											"parameters": {
												"outputfolder": "output"
											}
										}
									]
								},
								{
									"name": "Web",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Copy data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": "Https://httpstat.us/200?sleep=60000"
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "lookuppipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"outputfolder": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-08T09:03:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvdatasetsource')]",
				"[concat(variables('factoryId'), '/datasets/sinkcsvdataset')]",
				"[concat(variables('factoryId'), '/pipelines/lookuppipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/compresspipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data compress",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binarysourcecompress",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binarydatasetcompresssink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-07T19:46:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binarysourcecompress')]",
				"[concat(variables('factoryId'), '/datasets/Binarydatasetcompresssink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/compresspipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Sourcecompresszip",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binarydatasetcompresssink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-07T19:46:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sourcecompresszip')]",
				"[concat(variables('factoryId'), '/datasets/Binarydatasetcompresssink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/executedataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowpostgressql",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcepostgres": {},
									"sinkadls": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "vnetintegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-08T22:13:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowpostgressql')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/vnetintegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/immutablepipelinecopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourceimmu",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "destinationimmu",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-28T22:19:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourceimmu')]",
				"[concat(variables('factoryId'), '/datasets/destinationimmu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookuppipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"requestTimeout": "0.00:10:00"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"dataset": {
								"referenceName": "Xmldataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-27T15:59:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Xmldataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data_copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@variables('LastName')",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLSdatasetsource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLSGen2datasetsink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastName",
							"value": {
								"value": "@concat('IA244-001_CTR_BT_Report_ENC_', convertTimeZone(utcNow(),'UTC','Eastern Standard Time','yyyyMMdd'),'.csv')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"LastName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-08T21:33:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLSdatasetsource')]",
				"[concat(variables('factoryId'), '/datasets/ADLSGen2datasetsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopyforeach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastfileName",
							"value": {
								"value": "@concat('IA244-001_CTR_BT_Report_ENC_', convertTimeZone(utcNow(),'UTC','Eastern Standard Time','yyyyMMdd'),'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.arraylist",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data_copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@variables('LastfileName')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ADLSdatasetsource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ADLSGen2datasetsink",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"arraylist": {
						"type": "array",
						"defaultValue": [
							1,
							2
						]
					}
				},
				"variables": {
					"LastfileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-28T13:42:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLSdatasetsource')]",
				"[concat(variables('factoryId'), '/datasets/ADLSGen2datasetsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinejson')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy datajson",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Jsonsource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Jsonsink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-11T13:23:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Jsonsource')]",
				"[concat(variables('factoryId'), '/datasets/Jsonsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinepostgrestest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzurePostgreSqlSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLSdatasetsource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzurePostgreSqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-08T21:33:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLSdatasetsource')]",
				"[concat(variables('factoryId'), '/datasets/AzurePostgreSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinesnowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_sfk",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlssource": {},
									"sinksnowflake": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "vnetintegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-13T20:39:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_sfk')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/vnetintegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinestoragedataview')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLSdatasetsource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLSGen2datasetsink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-12T17:40:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLSdatasetsource')]",
				"[concat(variables('factoryId'), '/datasets/ADLSGen2datasetsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/postgrespipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzurePostgreSqlSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvdatasetsource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzurePostgreSqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-26T19:58:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvdatasetsource')]",
				"[concat(variables('factoryId'), '/datasets/AzurePostgreSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/webactvity_pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://dummy.restapiexample.com/api/v1/employees"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-01T15:59:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSGen2datasetsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "json_contract.json",
						"folderPath": "sinkfolder",
						"fileSystem": "democontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSdatasetsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EMPLOYEE.csv",
						"folderPath": "sourcefolder",
						"container": "democontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDestinyGlobal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZDestinyGlobalDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "FacExternalUserAssignment"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZDestinyGlobalDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "a",
						"type": "text",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binarydatasetcompresssink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"compression": {
						"type": "deflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binarysourcecompress')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "textfile.txt",
						"folderPath": "compressfiletext",
						"container": "inputcontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSqlContainerdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "productbuilderCosmos",
					"type": "LinkedServiceReference",
					"parameters": {
						"Database_name": "customer_id"
					}
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "new_data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/productbuilderCosmos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Jsonsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sample_dummy.json",
						"folderPath": "sinkfolder",
						"fileSystem": "democontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Jsonsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "json sample.json",
						"folderPath": "input",
						"container": "democontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflakedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "ID",
						"type": "VARCHAR"
					},
					{
						"name": "RECORD_ID",
						"type": "VARCHAR"
					},
					{
						"name": "ELEMENT_ID",
						"type": "VARCHAR"
					},
					{
						"name": "TEXT",
						"type": "VARCHAR"
					},
					{
						"name": "EMBEDDINGS",
						"type": "ARRAY"
					},
					{
						"name": "TYPE",
						"type": "VARCHAR"
					},
					{
						"name": "SYSTEM",
						"type": "VARCHAR"
					},
					{
						"name": "LAYOUT_WIDTH",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "LAYOUT_HEIGHT",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "POINTS",
						"type": "VARCHAR"
					},
					{
						"name": "URL",
						"type": "VARCHAR"
					},
					{
						"name": "VERSION",
						"type": "VARCHAR"
					},
					{
						"name": "DATE_CREATED",
						"type": "TIMESTAMP_TZ"
					},
					{
						"name": "DATE_PROCESSED",
						"type": "TIMESTAMP_TZ"
					},
					{
						"name": "DATE_MODIFIED",
						"type": "TIMESTAMP_TZ"
					},
					{
						"name": "SENT_FROM",
						"type": "ARRAY"
					},
					{
						"name": "SENT_TO",
						"type": "ARRAY"
					}
				],
				"typeProperties": {
					"schema": "MY_SCHEMA",
					"table": "ELEMENTS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sourcecompresszip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "textfile 2.zip",
						"folderPath": "compressfiletext",
						"container": "inputcontainer"
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Xmldataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@string('http')",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvdatasetjsonfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "VolcanoData.json",
						"folderPath": "input",
						"container": "democontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvdatasetsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EXCELDEMO.csv",
						"folderPath": "demo",
						"container": "inputcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/destinationimmu')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "destinationimmuls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "testimmutable",
						"container": "destincontainerimmutable"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/destinationimmuls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pb_contractsection_container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "productbuilderCosmos",
					"type": "LinkedServiceReference",
					"parameters": {
						"Database_name": "pb_productBuilder_container"
					}
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"typeId": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"regions": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"region": {
										"type": "string"
									},
									"lastUpdatedBy": {
										"type": "object",
										"properties": {
											"email": {
												"type": "string"
											},
											"userContextId": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"environments": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"users": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ieContactId": {
										"type": "integer"
									},
									"emailNotifications": {
										"type": "array",
										"items": {
											"type": "integer"
										}
									}
								}
							}
						},
						"lastUpdatedBy": {
							"type": "object",
							"properties": {
								"email": {
									"type": "string"
								},
								"userContextId": {
									"type": "null"
								}
							}
						},
						"isDeleted": {
							"type": "boolean"
						}
					}
				},
				"typeProperties": {
					"collectionName": "contractSection"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/productbuilderCosmos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pb_productBuilder_container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "productbuilderCosmos",
					"type": "LinkedServiceReference",
					"parameters": {
						"Database_name": "pb_productBuilder_container"
					}
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "contractSection"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/productbuilderCosmos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkcsvdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"outputfolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().outputfolder",
							"type": "Expression"
						},
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourceimmu')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "immutablecopyls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HREmployeesSink.csv",
						"container": "sourcecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/immutablecopyls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZDestinyGlobalDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AZDestinyGlobalDatabase_properties_typeProperties_server')]",
					"database": "[parameters('AZDestinyGlobalDatabase_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AZDestinyGlobalDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AZDestinyGlobalDatabase_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azdemoappentra')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Azdemoappentra_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobPracdacdemo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobPracdacdemo_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "vnetintegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/vnetintegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlobStorage2_properties_typeProperties_serviceEndpoint')]",
					"tenant": "[parameters('AzureBlobStorage2_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('AzureBlobStorage2_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('AzureBlobStorage2_servicePrincipalCredential')]"
					},
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageLS_properties_typeProperties_url')]",
					"credential": {
						"referenceName": "credential",
						"type": "CredentialReference"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/credentials/credential')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVaultsqlserver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultsqlserver_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"version": "2.0",
				"typeProperties": {
					"server": "[parameters('AzurePostgreSql_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('AzurePostgreSql_properties_typeProperties_database')]",
					"sslMode": 3,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "vnetintegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/vnetintegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Db21')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": "[parameters('Db21_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SHIR-1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SHIR-1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"server": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"version": "2.0",
				"typeProperties": {
					"server": "[parameters('Oracle1_properties_typeProperties_server')]",
					"authenticationType": "Basic",
					"username": "[parameters('Oracle1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Oracle1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"hostname": {
						"type": "string",
						"defaultValue": "godmf"
					},
					"portname": {
						"type": "string",
						"defaultValue": "ldlflf"
					},
					"sid": {
						"type": "string",
						"defaultValue": "lsldl"
					},
					"password": {
						"type": "string",
						"defaultValue": "lsdll"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Baseurlendpoint": {
						"type": "string"
					},
					"tokenurlendpoint": {
						"type": "string"
					},
					"clientid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "OAuth2ClientCredential",
					"clientId": "[parameters('RestService_properties_typeProperties_clientId')]",
					"clientSecret": {
						"type": "SecureString",
						"value": "[parameters('RestService_clientSecret')]"
					},
					"tokenEndpoint": "@{linkedService().tokenurlendpoint}"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ServiceNow_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "ServiceNowV2",
				"typeProperties": {
					"endpoint": "[parameters('ServiceNow_LS_properties_typeProperties_endpoint')]",
					"authenticationType": "Basic",
					"username": "[parameters('ServiceNow_LS_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ServiceNow_LS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sftp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('Sftp_properties_typeProperties_host')]",
					"port": "1532",
					"skipHostKeyValidation": false,
					"hostKeyFingerprint": "[parameters('Sftp_properties_typeProperties_hostKeyFingerprint')]",
					"authenticationType": "Basic",
					"userName": "[parameters('Sftp_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Sftp_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "KeyPair",
					"accountIdentifier": "sjejrok-fm56566",
					"user": "Krishh1996",
					"database": "[parameters('Snowflake_ls_properties_typeProperties_database')]",
					"warehouse": "MY_WAREHOUSE",
					"privateKey": {
						"type": "SecureString",
						"value": "[parameters('Snowflake_ls_privateKey')]"
					},
					"privateKeyPassphrase": {
						"type": "SecureString",
						"value": "[parameters('Snowflake_ls_privateKeyPassphrase')]"
					}
				},
				"connectVia": {
					"referenceName": "vnetintegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/vnetintegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_onprem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"servername": {
						"type": "string",
						"defaultValue": "KRISHHPC\\SQLEXPRESS"
					},
					"databasename": {
						"type": "string",
						"defaultValue": "krishh"
					},
					"username": {
						"type": "string",
						"defaultValue": "sa"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer_onprem_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer_onprem_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer_onprem_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultsqlserver",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqlserverpassword"
					}
				},
				"connectVia": {
					"referenceName": "SHIR-1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SHIR-1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultsqlserver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/destinationimmuls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('destinationimmuls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/immutablecopyls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('immutablecopyls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_kv_datafactory_bi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_kv_datafactory_bi_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/productbuilderCosmos')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Database_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('productbuilderCosmos_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggereventstorage')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipelinestoragedataview",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/democontainer/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('triggereventstorage_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipelinestoragedataview')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIR-1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/vnetintegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformContractSectionViewBordereau')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureDestinyGlobal",
								"type": "DatasetReference"
							},
							"name": "AzureDestinyGlobal"
						},
						{
							"dataset": {
								"referenceName": "pb_productBuilder_container",
								"type": "DatasetReference"
							},
							"name": "productBuilderContractSections"
						},
						{
							"dataset": {
								"referenceName": "pb_contractsection_container",
								"type": "DatasetReference"
							},
							"name": "ContractSectionViewBordereau"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Jsonsink",
								"type": "DatasetReference"
							},
							"name": "UpdateCosmosDB"
						},
						{
							"dataset": {
								"referenceName": "pb_contractsection_container",
								"type": "DatasetReference"
							},
							"name": "DeleteItemsInCosmos"
						}
					],
					"transformations": [
						{
							"name": "LookupContractSection"
						},
						{
							"name": "LookupId"
						},
						{
							"name": "DerivedColumns"
						},
						{
							"name": "AggregateColumns"
						},
						{
							"name": "SelectAttributes"
						},
						{
							"name": "InsertOrUpdate"
						},
						{
							"name": "UnusedData"
						},
						{
							"name": "SelectItemKeys"
						},
						{
							"name": "SetToDeleteUnusedData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ContractSectionID as integer,",
						"          LastUpdatedBy as string,",
						"          IEContactID as integer,",
						"          CanViewBordereauFlag as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [eua].[ContractSectionID] ,[eua].[LastUpdatedBy] ,[eua].[IEContactID] ,[eub].[CanViewBordereauFlag] FROM [DestinyGlobal].[dbo].[FacExternalUserAssignment] AS [eua] INNER JOIN [DestinyGlobal].[dbo].[FacExternalUserBordereau] AS [eub] ON [eua].[FacExternalUserAssignmentID] = [eub].[FacExternalUserAssignmentID]',",
						"     format: 'query') ~> AzureDestinyGlobal",
						"source(output(",
						"          typeId as string,",
						"          cosmosContractSectionId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT DISTINCT\\r\\n    f.typeId AS typeId,                     \\r\\n    f.contractSectionId AS cosmosContractSectionId\\r\\nFROM behaviors AS f\\r\\nWHERE f.type = \"contractSection\"\\r\\nAND f.isDeleted = false',",
						"     format: 'documentQuery',",
						"     systemColumns: false) ~> productBuilderContractSections",
						"source(output(",
						"          typeId as string,",
						"          type as string,",
						"          regions as (region as string, lastUpdatedBy as (email as string, userContextId as string))[],",
						"          environments as string[],",
						"          users as (ieContactId as integer, emailNotifications as integer[])[],",
						"          lastUpdatedBy as (email as string, userContextId as string),",
						"          isDeleted as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'document',",
						"     systemColumns: false) ~> ContractSectionViewBordereau",
						"AzureDestinyGlobal, productBuilderContractSections lookup(ContractSectionID == cosmosContractSectionId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupContractSection",
						"LookupContractSection, ContractSectionViewBordereau lookup(productBuilderContractSections@typeId == ContractSectionViewBordereau@typeId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupId",
						"LookupId derive(typeId = \"bordereau\",",
						"          CanViewBordereauFlag = @(ieContactId=IEContactID,",
						"          canViewBordereau=CanViewBordereauFlag)) ~> DerivedColumns",
						"DerivedColumns aggregate(groupBy(typeId),",
						"     users = collect(CanViewBordereauFlag)) ~> AggregateColumns",
						"AggregateColumns select(skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectAttributes",
						"SelectAttributes alterRow(upsertIf(!isNull(typeId)),",
						"     insertIf(isNull(users))) ~> InsertOrUpdate",
						"ContractSectionViewBordereau, productBuilderContractSections exists(ContractSectionViewBordereau@typeId == productBuilderContractSections@typeId,",
						"     negate:true,",
						"     broadcast: 'auto')~> UnusedData",
						"UnusedData select(mapColumn(",
						"          typeId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectItemKeys",
						"SelectItemKeys alterRow(deleteIf(true())) ~> SetToDeleteUnusedData",
						"InsertOrUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          typeId,",
						"          users",
						"     ),",
						"     format: 'document') ~> UpdateCosmosDB",
						"SetToDeleteUnusedData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          typeId as string,",
						"          type as string,",
						"          regions as (region as string, lastUpdatedBy as (email as string, userContextId as string))[],",
						"          environments as string[],",
						"          users as (ieContactId as integer, emailNotifications as integer[])[],",
						"          lastUpdatedBy as (email as string, userContextId as string),",
						"          isDeleted as boolean",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'document',",
						"     partitionKey: ['/typeId'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DeleteItemsInCosmos"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureDestinyGlobal')]",
				"[concat(variables('factoryId'), '/datasets/pb_productBuilder_container')]",
				"[concat(variables('factoryId'), '/datasets/pb_contractsection_container')]",
				"[concat(variables('factoryId'), '/datasets/Jsonsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_sfk')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "adlssource"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Snowflake_ls",
								"type": "LinkedServiceReference"
							},
							"name": "sinksnowflake"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'inputcontainer',",
						"     folderPath: 'demo',",
						"     fileName: 'EXCELDEMO.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false) ~> adlssource",
						"adlssource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'ELEMENTS',",
						"     schemaName: 'MY_SCHEMA',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'snowflake',",
						"     store: 'snowflakeV2',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> sinksnowflake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]",
				"[concat(variables('factoryId'), '/linkedServices/Snowflake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowpostgressql')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzurePostgreSqlTable",
								"type": "DatasetReference"
							},
							"name": "sourcepostgres"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ADLSGen2datasetsink",
								"type": "DatasetReference"
							},
							"name": "sinkadls"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          a as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcepostgres",
						"sourcepostgres sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkadls"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzurePostgreSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/ADLSGen2datasetsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/98163876-b4d3-4128-ad45-c4c6a103c74c/resourceGroups/MI-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/MI-SCUS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureBlobStorageendpoint')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureBlobStorageendpoint_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureBlobStorageendpoint_properties_groupId')]",
				"fqdns": "[parameters('AzureBlobStorageendpoint_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureDataLakeStorage299')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureDataLakeStorage299_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureDataLakeStorage299_properties_groupId')]",
				"fqdns": "[parameters('AzureDataLakeStorage299_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureSqlDatabase194')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureSqlDatabase194_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureSqlDatabase194_properties_groupId')]",
				"fqdns": "[parameters('AzureSqlDatabase194_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureSqlDatabase310')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureSqlDatabase310_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureSqlDatabase310_properties_groupId')]",
				"fqdns": "[parameters('AzureSqlDatabase310_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/CosmosDb')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('CosmosDb_properties_privateLinkResourceId')]",
				"groupId": "[parameters('CosmosDb_properties_groupId')]",
				"fqdns": "[parameters('CosmosDb_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}